/**
* @author [Dinesh B]
* @email dinesh.b@utilitarianLab.com
* @create date 2023-02-21 19:06:56
* @modify date 2023-02-21 19:06:56
* @desc [description]
*/

public class EvaluationController {
    
    // For Creating Reocords of Evalution 
    public Static void checkEvaluationCriteria(List<Application_Proposal__c> appList){
        List<Evaluation__mdt> Evalutiondata = new List<Evaluation__mdt>();
        Evalutiondata = [SELECT Id,label,Subject__c,Evaluation_Description__c,Progaram_Name__c,Progaram_Name__r.Label FROM Evaluation__mdt ORDER By Order__c ASC];
        List<Evaluation_Step__c> EvaList = new List <Evaluation_Step__c>();
        Set<Id> proposalIdSet = new Set<Id>();
        for(Application_Proposal__c ap : appList){
            proposalIdSet.add(ap.id);
        }
        for(Application_Proposal__c app : [SELECT Id,Name,RecordType.Name FROM Application_Proposal__c WHERe Id IN : proposalIdSet]){
            System.debug('app.RecordType.Name ::'+app.RecordType.Name);
            for(Evaluation__mdt emdt : Evalutiondata){
                if(app.RecordType.Name == 'PECFAR' && emdt.Progaram_Name__r.Label == 'PECFAR'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'WISER' && emdt.Progaram_Name__r.Label == 'WISER'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'SING' && emdt.Progaram_Name__r.Label == 'SING'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'Connect Plus' && emdt.Progaram_Name__r.Label == 'Connect Plus'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'Industrial Fellowship' && emdt.Progaram_Name__r.Label == 'Industrial Fellowship'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'Two Plus Two' && emdt.Progaram_Name__r.Label == 'Two Plus Two'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
                if(app.RecordType.Name == 'Workshop' && emdt.Progaram_Name__r.Label == 'Workshop'){
                    Evaluation_Step__c eva = new Evaluation_Step__c();
                    eva.Proposals__c = app.id;
                    eva.Subject__c = emdt.Subject__c;
                    eva.Description__c = emdt.Evaluation_Description__c;
                    EvaList.add(eva);
                }
            }
        }
        if(!EvaList.isEmpty()){
            insert EvaList;
            System.debug('EvaList Inserted Record Size :: '+EvaList.size());
        }
    }
    
    
    // For Updating the Proposal Record
   
    // For Updating the Proposal Record Update Method
    public Static void UpdatEvelutionCriteriaBasedOnEvalutionSteps(Map<Id, Evaluation_Step__c> newEvaluationStepMap, Map<Id, Evaluation_Step__c> oldEvaluationStepMap ){
        try{
            List<Application_Proposal__c> proposalListToUpdate = new List<Application_Proposal__c>();
            List<Application_Proposal__c> existingProposalList = new List<Application_Proposal__c>();
            Map<String, List<Evaluation_Step__c>> evaluationStepsListByProposalId = new Map<String, List<Evaluation_Step__c>>();
            
            
            if(!newEvaluationStepMap.isEmpty()){
                for(Evaluation_Step__c evaluationStepRecord : newEvaluationStepMap.values()){
                    system.debug('evaluationStepRecord--->'+evaluationStepRecord);
                    if(evaluationStepRecord.Yes__c != oldEvaluationStepMap.get(evaluationStepRecord.Id).Yes__c){
                        if(evaluationStepsListByProposalId.containsKey(evaluationStepRecord.Proposals__c)){
                            List<Evaluation_Step__c> evaluationStepList = evaluationStepsListByProposalId.get(evaluationStepRecord.Proposals__c);
                            evaluationStepList.add(evaluationStepRecord);
                            evaluationStepsListByProposalId.put(evaluationStepRecord.Proposals__c, evaluationStepList);
                        }else{
                            evaluationStepsListByProposalId.put(evaluationStepRecord.Proposals__c, new List<Evaluation_Step__c> {evaluationStepRecord} );
                        }
                    }
                }
                if(!evaluationStepsListByProposalId.isEmpty()){
                    existingProposalList = [Select Id,Evaluation_Criteria__c From Application_Proposal__c where Id in : evaluationStepsListByProposalId.keySet()];
                    if(!existingProposalList.isEmpty()){
                        for(Application_Proposal__c existingProposalRec : existingProposalList){
                            Application_Proposal__c proposalRecTOUpdate = new Application_Proposal__c();
                            proposalRecTOUpdate.Id = existingProposalRec.Id;
                            if(existingProposalRec.Evaluation_Criteria__c == null)
                                existingProposalRec.Evaluation_Criteria__c = 0;
                            decimal evaluationScore = existingProposalRec.Evaluation_Criteria__c;
                            if(evaluationStepsListByProposalId.containsKey(existingProposalRec.Id)){
                                for(Evaluation_Step__c updatedEvaluationStepRec : evaluationStepsListByProposalId.get(existingProposalRec.Id)){
                                    
                                    if(updatedEvaluationStepRec.Yes__c == true && updatedEvaluationStepRec.Proposal_RecordType__c == 'Industrial Fellowship'){
                                        evaluationScore = evaluationScore + 11.12;
                                    }else if(updatedEvaluationStepRec.Yes__c == false && updatedEvaluationStepRec.Proposal_RecordType__c == 'Industrial Fellowship'){
                                        evaluationScore = evaluationScore -11.12;
                                    }
                                    else if(updatedEvaluationStepRec.Yes__c == true && updatedEvaluationStepRec.Proposal_RecordType__c == 'PECFAR'){
                                        evaluationScore = evaluationScore + 11.12;
                                    }else if(updatedEvaluationStepRec.Yes__c == false && updatedEvaluationStepRec.Proposal_RecordType__c == 'PECFAR'){
                                        evaluationScore = evaluationScore -11.12;
                                    }
                                    else if(updatedEvaluationStepRec.Yes__c == true && updatedEvaluationStepRec.Proposal_RecordType__c == 'SING'){
                                        evaluationScore = evaluationScore + 20;
                                    }else if(updatedEvaluationStepRec.Yes__c == false && updatedEvaluationStepRec.Proposal_RecordType__c == 'SING'){
                                        evaluationScore = evaluationScore -20;
                                    }
                                    else if(updatedEvaluationStepRec.Yes__c == true && updatedEvaluationStepRec.Proposal_RecordType__c == 'WISER'){
                                        evaluationScore = evaluationScore + 14.3;
                                    }else if(updatedEvaluationStepRec.Yes__c == false && updatedEvaluationStepRec.Proposal_RecordType__c == 'WISER'){
                                        evaluationScore = evaluationScore -14.3;
                                    }
                                    else if(updatedEvaluationStepRec.Yes__c == true && updatedEvaluationStepRec.Proposal_RecordType__c == 'WORKSHOP'){
                                        evaluationScore = evaluationScore + 35;
                                    }else if(updatedEvaluationStepRec.Yes__c == false && updatedEvaluationStepRec.Proposal_RecordType__c == 'WORKSHOP'){
                                        evaluationScore = evaluationScore -35;
                                    }
                                }
                                proposalRecTOUpdate.Evaluation_Criteria__c = evaluationScore;
                                if(proposalRecTOUpdate.Evaluation_Criteria__c > 100){
                                    proposalRecTOUpdate.Evaluation_Criteria__c = 100;
                                }
                                if(proposalRecTOUpdate.Evaluation_Criteria__c < 0){
                                    proposalRecTOUpdate.Evaluation_Criteria__c = 0;
                                }
                                proposalListToUpdate.add(proposalRecTOUpdate);
                            }
                        }
                        if(!proposalListToUpdate.isEmpty()){
                            update proposalListToUpdate;
                        }
                    }
                    
                }
            }
        }catch(Exception e){
            System.debug('The Error ::'+e.getMessage() +' AND Error Line No :'+e.getLineNumber());
        }
    }
    
    // For Checking Criteria True  
    @AuraEnabled
    public Static Evaluation_Step__c updateCriteriaCheck(String recordId){
        Evaluation_Step__c evStep = [SELECT Id,Name,Proposals__c,Status__c,Evaluation_Check__c FROM Evaluation_Step__c WHERE Id =: recordId LIMIT 1];
        if(evStep.Evaluation_Check__c !=true){
            evStep.Evaluation_Check__c = true;
        }
        evStep.Status__c = 'Completed';
        update evStep;
        System.debug('evStep Update Record ::'+evStep);
        return evStep;
    }
}